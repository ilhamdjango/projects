name: Microservices CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  analitic:
    name: Analitic Service CI/CD
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: analitic_db
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Check contents
        run: ls -la ./analitic-service

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ./analitic-service

      - name: Run tests
        run: pytest tests/
        working-directory: ./analitic-service

      - name: Build Docker image
        run: docker build -t dockerilham117/projects-analitic:latest ./analitic-service

      - name: Docker login
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: docker push dockerilham117/projects-analitic:latest

  gateway:
    name: Gateway Service CI/CD
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: gateway_db
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Check contents
        run: ls -la ./ecomerce-gateway-service

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ./ecomerce-gateway-service

      - name: Run tests
        run: pytest tests/
        working-directory: ./ecomerce-gateway-service

      - name: Build Docker image
        run: docker build -t dockerilham117/projects-gateway:latest ./ecomerce-gateway-service

      - name: Docker login
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: docker push dockerilham117/projects-gateway:latest

  order:
    name: Order Service CI/CD
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: order_db
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Check contents
        run: ls -la ./order-service

      - name: Install dependencies (Poetry)
        run: |
          pip install poetry
          poetry install
        working-directory: ./order-service

      - name: Run tests
        run: poetry run python manage.py test
        working-directory: ./order-service

      - name: Build Docker image
        run: docker build -t dockerilham117/projects-order:latest ./order-service

      - name: Docker login
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: docker push dockerilham117/projects-order:latest
